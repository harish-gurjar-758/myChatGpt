"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ignoreAttribute = void 0;
/* eslint-disable @typescript-eslint/ban-ts-comment */
const fast_memoize_1 = __importDefault(require("fast-memoize"));
/** Throws error directly. */
function thrower(error) {
    throw error;
}
/**
 * Test whether one of the ignores matches gor is equal to value.
 *
 * @param ignores is the list of values to be ignored.
 * @param value is the value to test.
 * @returns if one of the ignores matches or is equal to value.
 */
function matches(ignores, value) {
    if (value === undefined)
        return false;
    return ignores.some((ignored) => (ignored instanceof RegExp ? ignored.test(value) : value === ignored));
}
/**
 * Converts it's input to an array.
 * - Arrays are returned as is.
 * - `undefined` are returned as an empty array.
 * - Non-aray values are returned as a single element array.
 *
 * @param input is the input to convert to array.
 * @returns input converted to an array.
 */
function arrify(input) {
    if (input === undefined)
        return [];
    return Array.isArray(input) ? input : [input];
}
/**
 * Determines default value and function from parameters.
 *
 * @param defaultOrFn is default value or function to execute.
 * @param maybeFn is function to execute or undefined.
 * @return dafult value and function to execute.
 */
function getDefault(defaultOrFn, maybeFn) {
    if (typeof maybeFn === "function")
        return [defaultOrFn, maybeFn];
    if (typeof defaultOrFn === "function" && maybeFn === undefined)
        return [undefined, defaultOrFn];
    return [defaultOrFn, undefined];
}
function _ignorer(attribute, ignores, defaultValue) {
    // If no ignored value is specified, return the function which throws immediatly.
    if (ignores.length === 0)
        return thrower;
    // Return a function which returns default value if error attribute matches one of the ignored values, throws otherwise.
    return (error) => {
        // Support AggregateError or similar errors objects, which contains multiple errors.
        const errors = Array.isArray(error?.errors) ? error.errors : [error];
        if (errors.every((e) => matches(ignores, e[attribute])))
            return defaultValue;
        throw error;
    };
}
function ignorerSync(attribute, ignores, defaultValue, fn) {
    try {
        return fn();
    }
    catch (error) {
        // If no ignored value is specified, throw directly.
        if (ignores.length === 0)
            throw error;
        // Return default value if error attribute matches one of the ignored values. Otherwise throw.
        if (matches(ignores, error[attribute]))
            return defaultValue;
        throw error;
    }
}
const ignorer = fast_memoize_1.default(_ignorer);
/**
 * If a function is provided executes the function and ignores some errors. If no function is provided returns a catch function.
 *
 * @param attribute is the error attribute to ignore some values.
 * @param ignore is the values to ignore when thrown error's attribute matches.
 * @param defaultOrFn default value if error is ignored or function to execute.
 * @param maybeFn function to execute or undefined.
 * @returns catch function, default value or undefined.
 * @throws error if thrown error does not match ignored ones.
 */
function ignoreAttribute(attribute, ignore, defaultOrFn, maybeFn) {
    const [defaultValue, fn] = getDefault(defaultOrFn, maybeFn);
    return typeof fn === "function"
        ? ignorerSync(attribute, arrify(ignore), defaultValue, fn)
        : ignorer(attribute, arrify(ignore), defaultValue);
}
exports.ignoreAttribute = ignoreAttribute;
//# sourceMappingURL=ignorer.js.map